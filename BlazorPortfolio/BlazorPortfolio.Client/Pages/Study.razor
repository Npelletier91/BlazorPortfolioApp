@page "/Study"
@rendermode InteractiveWebAssembly
@using BlazorPorfolio.Models
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<style>
    .flashcard {
    display: flex;
    align-items: center;
    justify-content: center;
    flex-direction: column;
    cursor: pointer;
    background-color: #fff;
    border: 1px solid #ddd;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.2);
    padding: 20px;
    margin: 20px auto;
    width: 70%;
    max-width: 500px;
    min-width: 300px;
    height: 250px;
    text-align: center;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.flashcard:hover {
        transform: translateY(-5px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.3);
    }

.flashcard p {
        margin: 0;
        font-size: 1.2em;
    }

.btn-container{
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: row;
        gap: 10px;
        margin-top: 20px; 
}

    button.btn.btn-primary, input[type="button"].btn {
        background-color: #6F089D;
        border-color: #6F089D;
        color: white;
    }

        button.btn.btn-outline-info, input[type="button"].btn.btn-outline-info {
            background-color: transparent;
            border-color: rgba(215, 108, 148, 0.52);
            color: rgba(215, 108, 148, 0.52);
        }

            button.btn.btn-outline-info:hover, input[type="button"].btn.btn-outline-info:hover {
                background-color: rgba(215, 108, 148, 0.52);
                color: white;
            }
</style>




<h1>Flashcard App</h1><br />


@if (showSets == true && allSets.Any())
{
    <h4>Choose your flashcard set</h4>
    <ul>

        <table class="table">
            <thead>
                <tr>
                    <th>Set Name</th>
                    <th>Cards in Set</th>
                    <th></th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var set in allSets)
                {
                    <tr>
                        <td>@set.SetName</td>
                        <td>@set.Flashcards.Count</td>
                        <td></td>
                        <td><button class="btn btn-primary" @onclick="(() => LoadCurrentSet(set))">Study</button></td>
                    </tr>
                }
            </tbody>
        </table>
    </ul>
}
else if (showSets == true)
{
    <p style="font-style: italic;">Loading...</p>

}
else
{
    <h6>Click to list all of the Flashrcard Sets that you have.</h6>

}

<button @onclick="ShowAllSets" class="btn btn-outline-info">Show</button>
<button @onclick="HideAllSets" class="btn btn-outline-info">Hide</button>
<br />







@if (flashcardSet != null && flashcardSet.Flashcards.Any())
{
    <div class="btn-container">
        <button class="btn btn-primary" @onclick="PreviousCard">Previous</button>
        <button class="btn btn-primary" @onclick="NextCard">Next</button>
    </div>
    <br />
    <div class="flashcard" @onclick="FlipCard">
        @if (showFront)
        {
            <p style="font-weight: bold;">@flashcardSet.Flashcards[currentIndex].FrontText</p>
        }
        else
        {
            <p>@flashcardSet.Flashcards[currentIndex].BackText</p>
        }
    </div>
    <p style="justify-content: center; display: flex">@(currentIndex + 1)/@flashcardSet.Flashcards.Count</p>

}



@code {
    private FlashcardSet flashcardSet = new FlashcardSet();
    private List<FlashcardSet> allSets = new List<FlashcardSet>();
    private int currentIndex = 0;
    private bool showFront = true;
    private bool showSets = true;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadAllSets();
            StateHasChanged();
        }
    }


    private async Task LoadAllSets()
    {
        allSets = await LocalStorage.GetItemAsync<List<FlashcardSet>>("allFlashcardSets") ?? new List<FlashcardSet>();
    }

    private void LoadCurrentSet(FlashcardSet selectedSet)
    {
        flashcardSet = selectedSet;
        currentIndex = 0;
        showFront = true;
    }

    private void NextCard()
    {
        if (flashcardSet.Flashcards.Any() && currentIndex < flashcardSet.Flashcards.Count - 1)
        {
            currentIndex++;
            showFront = true;
        }
    }

    private void PreviousCard()
    {
        if (flashcardSet.Flashcards.Any() && currentIndex > 0)
        {
            currentIndex--;
            showFront = true;
        }
    }

    private void FlipCard()
    {
        showFront = !showFront; 
    }

    private void HideAllSets()
    {
        showSets = false;
        StateHasChanged();
    }

    private void ShowAllSets()
    {
        showSets = true;
        StateHasChanged();
    }

}
