@page "/flashcards"
@rendermode InteractiveWebAssembly
@using BlazorPorfolio.Models
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<style>
    button.btn.btn-primary, input[type="button"].btn {
        background-color: #6F089D;
        border-color: #6F089D;
        color: white;
    }

    button.btn.btn-outline-info, input[type="button"].btn.btn-outline-info {
        background-color: transparent;
            border-color: rgba(215, 108, 148, 0.52);
            color: rgba(215, 108, 148, 0.52);
    }

    button.btn.btn-outline-info:hover, input[type="button"].btn.btn-outline-info:hover {
                background-color: rgba(215, 108, 148, 0.4);
        color: white;
    }

    .new-card-container
    {
        background-color: rgba(200, 200, 200, 0.8);
        padding: 10px;
        padding-bottom: 40px;
    }
</style>



<h1>Flashcard App</h1>


<br />
@if (showSets == true && allSets.Any())
{
    <h4>Your Current Sets</h4>
    <ul>

        <table class="table">
            <thead>
                <tr>
                    <th>Set Name</th>
                    <th>Cards in Set</th>
                    <th></th>
                    <th></th>
                    <th></th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var set in allSets)
                {
                    <tr>
                        <td>@set.SetName</td>
                        <td>@set.Flashcards.Count</td>
                        <td></td>
                        <td><button class="btn btn-primary" @onclick="PlayCards">Study</button></td>
                        <td><button class="btn btn-primary" @onclick="(() =>EditSet(set))">Edit</button></td>
                        <td><button class="btn btn-outline-danger" @onclick="(() => DeleteSet(set))">Delete</button></td>
                    </tr>
                }
            </tbody>
            </table>
    </ul>
}
else if (showSets == true)
{
    <p style="font-style: italic;">Loading...</p>
}
else if (!allSets.Any())
{

}
else if (showSets == false)
{
    <h6>Click to list all of the Flashrcard Sets that you have.</h6>

}


<button @onclick="ShowAllSets" class="btn btn-outline-info">Show</button>
<button @onclick="HideAllSets" class="btn btn-outline-info">Hide</button>
<br />
<br />
<br />
<br />

<div class=" new-card-container">

    <h4>Add new cards</h4>



    <EditForm Model="@newFlashcard" OnValidSubmit="@AddFlashcard">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label for="frontText" class="form-label">Front Text</label>
            <InputText id="frontText" class="form-control" @bind-Value="newFlashcard.FrontText" />
            <ValidationMessage For="@(() => newFlashcard.FrontText)" />

        </div>
        <div class="mb-3">
            <label for="backText" class="form-label">Back Text</label>
            <InputText id="backText" class="form-control" @bind-Value="newFlashcard.BackText" />
            <ValidationMessage For="@(() => newFlashcard.BackText)" />

        </div>
        <button type="submit" class="btn btn-primary">Submit</button>

    </EditForm>


    <br /> 
    @if (flashcardSet.Flashcards.Any())
    {
    <h5>Flashcard Count: @flashcardSet.Flashcards.Count</h5>
        <ul>
            <table class="table">
                <thead>
                    <tr>
                        <th>Card Front</th>
                        <th>Cards Back</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var card in flashcardSet.Flashcards)
                    {
                        <tr>
                            <td>@card.FrontText</td>
                            <td>@card.BackText</td>
                            <td><button class="btn btn-outline-danger" @onclick="(() => DeleteCard(card))">Delete</button></td>
                        </tr>
                    }
                </tbody>
            </table>
        </ul>
    }

    <h6>Input the name of this Flashcard Set:</h6>
    <InputText @bind-Value="flashcardSet.SetName" @oninput="OnInputChanged" class="form-control" placeholder="Set Name" />
    <br />
    <button @onclick="SaveCurrentSet" class="btn btn-primary" disabled="@string.IsNullOrWhiteSpace(flashcardSet.SetName)">Save Set</button>


</div>


<br /><br />

<br /><br />





@code {
    private Flashcard newFlashcard = new Flashcard();
    private FlashcardSet flashcardSet = new FlashcardSet();
    private List<FlashcardSet> allSets = new List<FlashcardSet>();

    private int nextId = 1;
    private bool showSets = true;

    private void AddFlashcard()
    {
        newFlashcard.Id = nextId++;
        flashcardSet.Flashcards.Add(newFlashcard);
        newFlashcard = new Flashcard(); 
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadFlashcards();
            await LoadAllSets();
            StateHasChanged();
        }
    }

    private async Task LoadFlashcards()
    {
        try
        {


            var loadedSet = await LocalStorage.GetItemAsync<FlashcardSet>("FlashcardSet") ?? new FlashcardSet();
            flashcardSet = loadedSet;

            if (flashcardSet.Flashcards.Any())
            {
                nextId = flashcardSet.Flashcards.Max(fc => fc.Id) + 1;
            }
            else
            {
                nextId = 1;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("failed because:" + ex.Message);
        }
    }

    private void HideAllSets()
    {
        showSets = false;
        StateHasChanged();
    }

    private void ShowAllSets()
    {
        showSets = true;
        StateHasChanged();
    }

    private async Task SaveCurrentSet()
    {
        // Check if the set name is unique or update an existing set
        var existingSet = allSets.FirstOrDefault(s => s.SetName == flashcardSet.SetName);
        if (existingSet == null)
        {
            allSets.Add(flashcardSet); // Add new set to the list
        }
        else
        {
            // Update an existing set
            existingSet.Flashcards = flashcardSet.Flashcards;
        }

        await SaveAllSets(); // Save all sets to local storage
        flashcardSet = new FlashcardSet(); // Reset for a new set
    }

    private async Task SaveAllSets()
    {
        await LocalStorage.SetItemAsync("allFlashcardSets", allSets);
    }

    private async Task LoadAllSets()
    {
        allSets = await LocalStorage.GetItemAsync<List<FlashcardSet>>("allFlashcardSets") ?? new List<FlashcardSet>();
    }


    private void PlayCards()
    {
        NavigationManager.NavigateTo("/Study");
    }



    private void OnInputChanged(ChangeEventArgs e)
    {
        flashcardSet.SetName = e.Value?.ToString();
    }



    private async Task DeleteSet(FlashcardSet selectedSet)
    {
        allSets.Remove(selectedSet);
        await LocalStorage.SetItemAsync("allFlashcardSets", allSets);
    }


    private async Task DeleteCard(Flashcard selectedCard)
    {
        flashcardSet.Flashcards.Remove(selectedCard);
        await LocalStorage.SetItemAsync("FlashcardSet", flashcardSet.Flashcards);
    }


    private async Task EditSet(FlashcardSet selectedSet)
    {
        flashcardSet = selectedSet;
    }

}

