@page "/Study"
@rendermode InteractiveWebAssembly
@using BlazorPorfolio.Models
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<style>
    .flashcard {
    display: flex;
    align-items: center;
    justify-content: center;
    flex-direction: column;
    cursor: pointer;
    background-color: #fff;
    border: 1px solid #ddd;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.2);
    padding: 20px;
    margin: 20px auto;
    width: 70%;
    max-width: 500px;
    min-width: 300px;
    height: 250px;
    text-align: center;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.flashcard:hover {
        transform: translateY(-5px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.3);
    }

.flashcard p {
        margin: 0;
        font-size: 1.2em;
    }

.btn-container{
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: row;
        gap: 10px;
        margin-top: 20px; 
}


</style>




<h3>Study</h3><br /><br />



@if (allSets.Any())
{
    <h5>Choose your Set</h5>

    @foreach (var set in allSets)
    {
        <button class="btn btn-info" @onclick="(() => LoadCurrentSet(set))">@set.SetName</button>
        <br />
        <br />
    }
}
else
    {
        <p>Loading sets...</p>
    }



<div class="btn-container">
    <button class="btn btn-info" @onclick="PreviousCard">Previous</button>
    <button class="btn btn-info" @onclick="NextCard">Next</button>
</div>
<br />


@if (flashcardSet != null && flashcardSet.Flashcards.Any())
{
    <div class="flashcard" @onclick="FlipCard">
        @if (showFront)
        {
            <p>@flashcardSet.Flashcards[currentIndex].FrontText</p>
        }
        else
        {
            <p>@flashcardSet.Flashcards[currentIndex].BackText</p>
        }
    </div>
}



@code {
    private FlashcardSet flashcardSet = new FlashcardSet();
    private List<FlashcardSet> allSets = new List<FlashcardSet>();
    private int currentIndex = 0;
    private bool showFront = true;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadAllSets();
            StateHasChanged();
        }
    }


    private async Task LoadAllSets()
    {
        allSets = await LocalStorage.GetItemAsync<List<FlashcardSet>>("allFlashcardSets") ?? new List<FlashcardSet>();
    }

    private void LoadCurrentSet(FlashcardSet selectedSet)
    {
        flashcardSet = selectedSet;
        currentIndex = 0;
        showFront = true;
    }

    private void NextCard()
    {
        if (flashcardSet.Flashcards.Any() && currentIndex < flashcardSet.Flashcards.Count - 1)
        {
            currentIndex++;
            showFront = true;
        }
    }

    private void PreviousCard()
    {
        if (flashcardSet.Flashcards.Any() && currentIndex > 0)
        {
            currentIndex--;
            showFront = true;
        }
    }

    private void FlipCard()
    {
        showFront = !showFront; 
    }
}
