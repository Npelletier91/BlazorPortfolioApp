@page "/flashcards"
@rendermode InteractiveWebAssembly
@using BlazorPorfolio.Models
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage


<h1>Flashcard App</h1>



@if (showSets == true && allSets.Any())
{
    <h5>Your Current Sets</h5>
    <ul>

        <table class="table">
            <thead>
                <tr>
                    <th>Set Name</th>
                    <th>Cards in Set</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var set in allSets)
                {
                    <tr>
                        <td>@set.SetName</td>
                        <td>@set.Flashcards.Count</td>
                        <td><button @onclick="(() => DeleteSet(set))">Delete</button></td>
                    </tr>
                }
            </tbody>
            </table>
    </ul>
}
else if (showSets == true)
{
    <p style="font-style: italic;">Loading...</p>
}
else if (!allSets.Any())
{
    
}
<button @onclick="ShowAllSets" class="btn btn-info">Show currently saved sets </button>
<button @onclick="HideAllSets" class="btn btn-info">Hide sets</button>
<br />
<br />


<h4>Add new cards</h4>



<EditForm Model="@newFlashcard" OnValidSubmit="@AddFlashcard">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="frontText" class="form-label">Front Text</label>
        <InputText id="frontText" class="form-control" @bind-Value="newFlashcard.FrontText" />
        <ValidationMessage For="@(() => newFlashcard.FrontText)" />

    </div>
    <div class="mb-3">
        <label for="backText" class="form-label">Back Text</label>
        <InputText id="backText" class="form-control" @bind-Value="newFlashcard.BackText" />
        <ValidationMessage For="@(() => newFlashcard.BackText)" />

    </div>
    <button type="submit" class="btn btn-primary">Submit</button>

</EditForm>


<br /> 
@if (flashcardSet.Flashcards.Any())
{
    <h5>Flashcard Count: @flashcardSet.Flashcards.Count</h5>
    <ul>
        <table class="table">
            <thead>
                <tr>
                    <th>Card Front</th>
                    <th>Cards Back</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var card in flashcardSet.Flashcards)
                {
                    <tr>
                        <td>@card.FrontText</td>
                        <td>@card.BackText</td>
                    </tr>
                }
            </tbody>
        </table>
    </ul>
}
<br />
<InputText @bind-Value="flashcardSet.SetName" @oninput="OnInputChanged" class="form-control" placeholder="Set Name" />
<br />
<button @onclick="SaveCurrentSet" class="btn btn-success" disabled="@string.IsNullOrWhiteSpace(flashcardSet.SetName)">Save Set</button>





<br /><br />
<button class="btn btn-primary" @onclick="PlayCards">Study</button>
<br /><br />





@code {
    private Flashcard newFlashcard = new Flashcard();
    private FlashcardSet flashcardSet = new FlashcardSet();
    private List<FlashcardSet> allSets = new List<FlashcardSet>();

    private int nextId = 1;
    private bool showSets = true;

    private void AddFlashcard()
    {
        newFlashcard.Id = nextId++;
        flashcardSet.Flashcards.Add(newFlashcard);
        newFlashcard = new Flashcard(); 
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadFlashcards();
            await LoadAllSets();
            StateHasChanged();
        }
    }

    private async Task LoadFlashcards()
    {
        var loadedSet = await LocalStorage.GetItemAsync<FlashcardSet>("flashcardSet") ?? new FlashcardSet();
        flashcardSet = loadedSet;

        if (flashcardSet.Flashcards.Any())
        {
            nextId = flashcardSet.Flashcards.Max(fc => fc.Id) + 1;
        }
        else
        {
            nextId = 1;
        }
    }

    private void HideAllSets()
    {
        showSets = false;
        StateHasChanged();
    }

    private void ShowAllSets()
    {
        showSets = true;
        StateHasChanged();
    }

    private async Task SaveCurrentSet()
    {
        // Check if the set name is unique or update an existing set
        var existingSet = allSets.FirstOrDefault(s => s.SetName == flashcardSet.SetName);
        if (existingSet == null)
        {
            allSets.Add(flashcardSet); // Add new set to the list
        }
        else
        {
            // Update an existing set
            existingSet.Flashcards = flashcardSet.Flashcards;
        }

        await SaveAllSets(); // Save all sets to local storage
        flashcardSet = new FlashcardSet(); // Reset for a new set
    }

    private async Task SaveAllSets()
    {
        await LocalStorage.SetItemAsync("allFlashcardSets", allSets);
    }

    private async Task LoadAllSets()
    {
        allSets = await LocalStorage.GetItemAsync<List<FlashcardSet>>("allFlashcardSets") ?? new List<FlashcardSet>();
    }


    private void PlayCards()
    {
        NavigationManager.NavigateTo("/Study");
    }



    private void OnInputChanged(ChangeEventArgs e)
    {
        flashcardSet.SetName = e.Value?.ToString();
    }



    private async Task DeleteSet(FlashcardSet selectedSet)
    {
        allSets.Remove(selectedSet);
        await LocalStorage.SetItemAsync("allFlashcardSets", allSets);
    }



}

